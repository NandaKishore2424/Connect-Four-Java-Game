import java.util.Arrays;
import java.util.Scanner;

public class ConnectFour {
    private static final int ROWS = 6;
    private static final int COLUMNS = 7;

    private static char[][] board = new char[ROWS][COLUMNS];
    private static char currentPlayer = 'X';

    public static void main(String[] args) {
        initializeBoard();
        printBoard();

        Scanner scanner = new Scanner(System.in);

        while (true) {
            int column = getColumn(scanner);
            dropPiece(column);

            printBoard();

            if (checkWin()) {
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            }

            if (isBoardFull()) {
                System.out.println("It's a draw!");
                break;
            }

            switchPlayer();
        }
    }

    private static void initializeBoard() {
        for (int i = 0; i < ROWS; i++) {
            Arrays.fill(board[i], ' ');
        }
    }

    private static void printBoard() {
        System.out.println(" 1 2 3 4 5 6 7");
        System.out.println("---------------");

        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLUMNS; j++) {
                System.out.print("|" + board[i][j]);
            }
            System.out.println("|");
            System.out.println("---------------");
        }
    }

    private static int getColumn(Scanner scanner) {
        int column;
        while (true) {
            System.out.print("Player " + currentPlayer + ", choose a column (1-7): ");
            column = scanner.nextInt() - 1;

            if (isValidMove(column)) {
                break;
            } else {
                System.out.println("Invalid move. Try again.");
            }
        }
        return column;
    }

    private static boolean isValidMove(int column) {
        return column >= 0 && column < COLUMNS && board[0][column] == ' ';
    }

    private static void dropPiece(int column) {
        for (int i = ROWS - 1; i >= 0; i--) {
            if (board[i][column] == ' ') {
                board[i][column] = currentPlayer;
                break;
            }
        }
    }

    private static void switchPlayer() {
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    private static boolean checkWin() {
        // Check for a win horizontally, vertically, or diagonally
        return checkHorizontal() || checkVertical() || checkDiagonal();
    }

    private static boolean checkHorizontal() {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j <= COLUMNS - 4; j++) {
                if (board[i][j] != ' ' &&
                        board[i][j] == board[i][j + 1] &&
                        board[i][j] == board[i][j + 2] &&
                        board[i][j] == board[i][j + 3]) {
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean checkVertical() {
        for (int i = 0; i <= ROWS - 4; i++) {
            for (int j = 0; j < COLUMNS; j++) {
                if (board[i][j] != ' ' &&
                        board[i][j] == board[i + 1][j] &&
                        board[i][j] == board[i + 2][j] &&
                        board[i][j] == board[i + 3][j]) {
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean checkDiagonal() {
        for (int i = 0; i <= ROWS - 4; i++) {
            for (int j = 0; j <= COLUMNS - 4; j++) {
                if (board[i][j] != ' ' &&
                        (board[i][j] == board[i + 1][j + 1] &&
                                board[i][j] == board[i + 2][j + 2] &&
                                board[i][j] == board[i + 3][j + 3])) {
                    return true;
                }

                if (board[i][j + 3] != ' ' &&
                        (board[i][j + 3] == board[i + 1][j + 2] &&
                                board[i][j + 3] == board[i + 2][j + 1] &&
                                board[i][j + 3] == board[i + 3][j])) {
                    return true;
                }
            }
        }
        return false;
    }

    private static boolean isBoardFull() {
        for (int i = 0; i < COLUMNS; i++) {
            if (board[0][i] == ' ') {
                return false;
            }
        }
        return true;
    }
}
